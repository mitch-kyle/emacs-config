#+TITLE: Window Manager - EXWM Configuration
#+AUTHOR: Mitch Kyle

* Just, Why?
The exwm package allows you to use emacs as a window manager if it's ran as the
root X window.I started using it for laugh then it became not a joke. Basically,
one day I walked into emacs and didn't walk out.

** Compile This File
in emacs:
#+BEGIN_EXAMPLE
C-u M-x org-babel-load-file RET path/to/window-manager.org
#+END_EXAMPLE

* Table Of Contents :TOC_3:
- [[#just-why][Just, Why?]]
  - [[#compile-this-file][Compile This File]]
- [[#header][Header]]
- [[#guts][Guts]]
  - [[#initial-configuration][Initial Configuration]]
  - [[#multiple-monitors][Multiple Monitors]]
    - [[#navigate-between-monitors][Navigate Between Monitors]]
    - [[#move-buffers-between-monitors][Move Buffers Between Monitors]]
  - [[#buffer-names][Buffer Names]]
  - [[#system-tray][System Tray]]
  - [[#mode-line][Mode Line]]
    - [[#date-and-time][Date and Time]]
    - [[#battery][Battery]]
  - [[#ibuffer-group][IBuffer Group]]
- [[#applications][Applications]]
  - [[#launching-applications][Launching Applications]]
  - [[#terminal-emulator][Terminal Emulator]]
  - [[#tmux][Tmux]]
  - [[#browser][Browser]]
  - [[#audio-controls][Audio Controls]]
  - [[#music][Music]]
  - [[#taking-screenshots][Taking Screenshots]]
  - [[#screen-lock][Screen Lock]]
- [[#keybindings][Keybindings]]
- [[#footer][Footer]]

* Header
Enable lexical binding and print generated file disclaimer
#+BEGIN_SRC emacs-lisp :tangle yes
;;; window-manager.el --- exwm configuration -*- lexical-binding: t; -*-
;;; Commentary:
;; This file was generated. do not edit. changes may be overwritten
;;; Code:
#+END_SRC

* Guts
** Initial Configuration
This loads up all the builtin configuration in the library.
Use the ido flavour if ido is available.
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm)
(require 'exwm-config)
(require 'server)

(if (require 'ido nil t)
    (progn (exwm-input-set-key (kbd "s-x b") #'ido-switch-buffer)
           (exwm-config-ido))
  (exwm-config-default))

(unless (server-running-p)
  (server-start))

(exwm-enable)
#+END_SRC

** Multiple Monitors
Automatically create new workspaces when monitors are added or removed.
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm-randr)
(require 'seq)
(defun wm/xrandr-update-outputs ()
  (let* ((monitors   (let ((reg "^\\([^ ]*?\\) connected")
                           (str (shell-command-to-string "xrandr"))
                           (pos 0) (res))
                       (while (setq pos (string-match reg str (1+ pos)))
                         (push (match-string 1 str) res))
                       (nreverse res)))
         (n-monitors (length monitors)))
    (setq exwm-randr-workspace-monitor-plist
          (apply 'append
                 (seq-map-indexed (lambda (montr idx)
                                    (list idx montr))
                                  monitors)))
    (while (> n-monitors (exwm-workspace--count))
      (exwm-workspace-add))
    (while (< n-monitors (exwm-workspace--count))
      (exwm-workspace-delete (- (exwm-workspace--count) 1)))))

(defun wm/xrandr-init ()
  (add-hook 'exwm-randr-screen-change-hook 'wm/xrandr-update-outputs)
  (wm/xrandr-update-outputs)
  (exwm-randr--init))

(defun wm/xrandr-exit ()
  (remove-hook 'exwm-randr-screen-change-hook 'wm/xrandr-update-outputs)
  (exwm-randr--exit))

(add-hook 'exwm-init-hook #'wm/xrandr-init)
(add-hook 'exwm-exit-hook #'wm/xrandr-exit)
#+END_SRC

*** Navigate Between Monitors
Since workspace are just frames we can move between them the magic library
called framemove which hooks into windmove and works pretty seamlessly.
In theory, in practice we need to do some monkeying to get it working.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package framemove
  :after windmove
  :commands (mkyle/windmove-framemove-hook fm-next-frame)
  :init
  (progn
    (require 'seq)
    ;; Framemove uses some old jazz but does so trivially, let's
    ;; give it the function it wants
    (defalias 'remove-if-not 'seq-filter))

  :config
  (progn
    (require 'windmove)

    (defun mkyle/windmove-framemove-hook (f dir &optional arg window)
      "Hook windmove to framemove properly"
      (condition-case nil
        (funcall f dir arg window)
        ('error (fm-next-frame dir))))

    (advice-add 'windmove-do-window-select
                :around
                #'mkyle/windmove-framemove-hook)))
#+END_SRC

Also make sure windmove bindings are avilable in exwm buffers
#+BEGIN_SRC emacs-lisp :tangle yes
(exwm-input-set-key (kbd "s-<left>") #'windmove-left)
(exwm-input-set-key (kbd "s-<right>") #'windmove-right)
(exwm-input-set-key (kbd "s-<up>") #'windmove-up)
(exwm-input-set-key (kbd "s-<down>") #'windmove-down)
#+END_SRC

*** Move Buffers Between Monitors
We're not gonna use workspaces for anything besides multimonitor support
so disable workspace isolation.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq exwm-workspace-show-all-buffers t
      exwm-layout-show-all-buffers    t)
#+END_SRC

** Buffer Names
Having a bunch of buffers named EXWM isn't helpful so let's make it the xwindow
title. Don't ask me why this isn't the default behaviour.
#+BEGIN_SRC emacs-lisp :tangle yes
(defun wm/rename-buffer ()
  (interactive)
  (exwm-workspace-rename-buffer
    (concat exwm-class-name ": "
            (if (<= (length exwm-title) 50)
                exwm-title
              (concat (substring exwm-title 0 49) "...")))))

(add-hook 'exwm-update-class-hook 'wm/rename-buffer)
(add-hook 'exwm-update-title-hook 'wm/rename-buffer)
#+END_SRC

** System Tray
Show the system tray in the bottom right corner.
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+END_SRC

** Mode Line
Add some extra information that would normally be in the window manager panel.

*** Date and Time
Show the date and time
#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-time-day-and-date t)
(display-time-mode t)
#+END_SRC

*** Battery
Show the battery level and charging status.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fancy-battery
  :commands fancy-battery-mode
  :config (fancy-battery-mode t))
#+END_SRC

** IBuffer Group
It's nice to have all the xwindows in their own ibuffer group so you aren't
 hunting for them.
#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load "ibuffer-dynamic-groups"
  (ibuffer-dynamic-groups-add (lambda (groups)
                                (append '(("X Windows" (mode . exwm-mode)))
                                        groups))
                              '((name . exwm-group)
                                (depth . -10))))
#+END_SRC


* Applications
** Launching Applications
Gotta be able to launch windows without hanging emacs.
#+BEGIN_SRC emacs-lisp :tangle yes
(defmacro wm/define-launcher (fun-name command-and-args)
  "Define an interactive function that invokes the shell command given"
  `(defun ,fun-name ()
     (interactive)
     (start-process-shell-command "" nil ,command-and-args)))

(defun wm/run-sh-async (command)
  "Interactive prompt to run a shell command in a child process which
may or may not spawn an x window"
  (interactive (list (read-shell-command "$ ")))
  (start-process-shell-command "" nil command))
#+END_SRC

** Terminal Emulator
Because eshell doesn't really do it for me.
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar wm/terminal-emulator "terminator")
(defvar wm/preferred-shell "/usr/bin/zsh")
#+END_SRC

**** TODO replace terminator
 terminator is old and I don't think maintained anymore. maybe move
 to lxterminal?

** Tmux
It's dirty but it works. We want to be able to run a command in a new-window
in our tmux session (create it if needed), launch a new window in the
directory of the file being edited, and to simply raise the tmux window.

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar wm/tmux-session-name "0")

(defun wm/run-tmux (command)
  "Run a command in a new window of the tmux session"
  (interactive (list (read-shell-command "[tmux]$ ")))
  (start-process-shell-command
   "" nil
   (concat wm/terminal-emulator
           " -e 'tmux new-session -AD -c $HOME -s "
           wm/tmux-session-name
           "\\; new-window -c $(pwd) \""
           command
           "\"'")))

(wm/define-launcher wm/tmux-shell-here
                    (concat wm/terminal-emulator
                            " -e 'tmux new-session -AD -c $HOME -s \""
                            wm/tmux-session-name
                            "\" \\; new-window -c $(pwd) "
                            wm/preferred-shell "'"))

(wm/define-launcher wm/tmux (concat wm/terminal-emulator
                                    " -e 'tmux new-session -AD -c $HOME -s \""
                                    wm/tmux-session-name "\"'"))
#+END_SRC

** Browser
For browsin...
 #+BEGIN_SRC emacs-lisp :tangle yes
(wm/define-launcher wm/browser (or (getenv "X_BROWSER") "firefox"))
#+END_SRC

** Audio Controls
For dealing wh'cher beepers and y'ur wiretaps and whatnot.
#+BEGIN_SRC emacs-lisp :tangle yes
(wm/define-launcher wm/volume-manager
                    (concat wm/terminal-emulator
                            " --title Volume -e 'pulsemixer || alsamixer'"))
(wm/define-launcher wm/volume-up "amixer set Master 5%+")
(wm/define-launcher wm/volume-down "amixer set Master 5%-")
(wm/define-launcher wm/mute-toggle "amixer set Master toggle")
(wm/define-launcher wm/mute-mic "amixer set Mic toggle")
#+END_SRC

** Music
Use mpd so your music doesn't stop when x crashes.
also so it can always go to the wrong output.
#+BEGIN_SRC emacs-lisp :tangle yes
(wm/define-launcher wm/music-toggle "mpc toggle")
(wm/define-launcher wm/music-next "mpc next")
(wm/define-launcher wm/music-prev "mpc prev")
(wm/define-launcher wm/music-manager
                    (concat wm/terminal-emulator
                            " -e 'ncmpcpp -s playlist -S visualizer'"))
#+END_SRC

** Taking Screenshots
#+BEGIN_SRC emacs-lisp :tangle yes
(wm/define-launcher wm/scrot
                    "scrot --select --exec 'mv $f ~/Pictures/screenshots'")
#+END_SRC

** Screen Lock
#+BEGIN_SRC emacs-lisp :tangle yes
(wm/define-launcher wm/lock "dm-tool lock")
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; Enable or disable other emacs keybindings in exwm windows
(exwm-input-set-key (kbd "s-SPC") 'exwm-input-toggle-keyboard)

;;Send the next key without it being captured by emacs
(exwm-input-set-key (kbd "C-q") 'exwm-input-send-next-key)

;; Do stuff
(exwm-input-set-key (kbd "s-`") 'wm/run-sh-async)
(exwm-input-set-key (kbd "s-!") 'wm/run-tmux)

;; Apps
(exwm-input-set-key (kbd "s-x i")             'wm/browser)
(exwm-input-set-key (kbd "s-x v")             'wm/volume-manager)
(exwm-input-set-key (kbd "s-x l")             'wm/lock)
(exwm-input-set-key (kbd "s-x <return>")      'wm/tmux-shell-here)
(exwm-input-set-key (kbd "s-<return>")        'wm/tmux)
(exwm-input-set-key (kbd "<XF86Launch1>")     'wm/scrot)
(exwm-input-set-key (kbd "<XF86ScreenSaver>") 'wm/lock)

;; Music
(exwm-input-set-key (kbd "s-x m")           'wm/music-manager)
(exwm-input-set-key (kbd "s-x M-<down>")    'wm/music-toggle)
(exwm-input-set-key (kbd "s-x M-<left>")    'wm/music-prev)
(exwm-input-set-key (kbd "s-x M-<right>")   'wm/music-next)
(exwm-input-set-key (kbd "<XF86AudioPlay>") 'wm/music-toggle)
(exwm-input-set-key (kbd "<XF86AudioNext>") 'wm/music-next)
(exwm-input-set-key (kbd "<XF86AudioPrev>") 'wm/music-prev)
;; Some laptops put playback symbols on other keys for some reason
(exwm-input-set-key (kbd "<XF86LaunchA>")   'wm/music-toggle)
(exwm-input-set-key (kbd "<XF86Search>")    'wm/music-prev)
(exwm-input-set-key (kbd "<XF86Explorer>")  'wm/music-next)

;; Audio Control
(exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") 'wm/volume-up)
(exwm-input-set-key (kbd "<XF86AudioLowerVolume>") 'wm/volume-down)
(exwm-input-set-key (kbd "<XF86AudioMute>")        'wm/mute-toggle)
(exwm-input-set-key (kbd "<XF86AudioMicMute>")     'wm/mute-mic)

;; These work in hardware so don't need warning about undefined
(exwm-input-set-key (kbd "<XF86MonBrightnessDown>") (lambda () (interactive)))
(exwm-input-set-key (kbd "<XF86MonBrightnessUp>")   (lambda () (interactive)))
(exwm-input-set-key (kbd "<XF86Sleep>")             (lambda () (interactive)))
(exwm-input-set-key (kbd "<XF86WLAN>")              (lambda () (interactive)))

#+END_SRC
* Footer
#+BEGIN_SRC emacs-lisp :tangle yes
;;; window-manager.el ends here
#+END_SRC
